{"name":"Ascii Table","tagline":"Ascii Tables for JS","body":"Ascii Table\r\n===========\r\n\r\n[![Build Status](https://secure.travis-ci.org/sorensen/ascii-table.png)](http://travis-ci.org/sorensen/ascii-table) \r\n[![devDependency Status](https://david-dm.org/sorensen/ascii-table.png)](https://david-dm.org/sorensen/ascii-table#info=dependencies)\r\n[![NPM version](https://badge.fury.io/js/ascii-table.png)](http://badge.fury.io/js/ascii-table)\r\n\r\nEasy table output for node debugging, but you could probably do more with it, \r\nsince its just a string.\r\n\r\nTable of Contents\r\n-----------------\r\n\r\n* [Usage](#usage)\r\n* [Example](#usage)\r\n* [API](#api)\r\n  - [Static Methods](#static-methods)\r\n    * [factory([title])](#asciitablefactorytitle)\r\n    * [align(direction, val, len, [pad])](#asciitablealigndirection-val-len-pad)\r\n    * [alignLeft(val, len, [pad])](#asciitablealignleftval-len-pad)\r\n    * [alignCenter(val, len, [pad])](#asciitablealigncenterval-len-pad)\r\n    * [alignRight(val, len, [pad])](#asciitablealignrightval-len-pad)\r\n    * [alignAuto(val, len, [pad])](#asciitablealignautoval-len-pad)\r\n    * [arrayFill(len, [val])](#asciitablearrayfilllen-val)\r\n    \r\n  - [Instance Methods](#instance-methods)\r\n    * [setBorder([edge], [fill], [top], [bottom])](#instancesetborderedge-fill-top-bottom)\r\n    * [removeBorder()](#instanceremoveborder)\r\n    * [setAlign(idx, direction)](#instancesetalignidx-direction)\r\n    * [setAlignLeft(idx)](#instancesetalignleftidx)\r\n    * [setAlignCenter(idx)](#instancesetaligncenteridx)\r\n    * [setAlignRight(idx)](#instancesetalignrightidx)\r\n    * [setTitle(title)](#instancesettitletitle)\r\n    * [getTitle()](#instancegettitle)\r\n    * [setTitleAlign(direction)](#instancesettitlealigndirection)\r\n    * [setTitleAlignLeft()](#instancesettitlealignleft)\r\n    * [setTitleAlignCenter()](#instancesettitlealigncenter)\r\n    * [setTitleAlignRight()](#instancesettitlealignright)\r\n    * [sort([iterator])](#instancesortiterator)\r\n    * [sortColumn(idx, [iterator])](#instancesortcolumnidx-iterator)\r\n    * [setHeading(heading, [...])](#instancesetheadingheading)\r\n    * [setHeadingAlign(direction)](#instancesetheadingaligndirection)\r\n    * [setHeadingAlignLeft()](#instancesetheadingalignleft)\r\n    * [setHeadingAlignCenter()](#instancesetheadingaligncenter)\r\n    * [setHeadingAlignRight()](#instancesetheadingalignright)\r\n    * [addRow(row, [...])](#instanceaddrowrow)\r\n    * [addRowMatrix(rows)](#instanceaddrowmatrixrows)\r\n    * [setJustify([enabled])](#instancesetjustifyenabled)\r\n    * [toString()](#instancetostring)\r\n    * [toJSON()](#instancetojson)\r\n    * [fromJSON(obj)](#instancefromjsonobj)\r\n    * [clear()](#instanceclear)\r\n    * [clearRows()](#instanceclearrows)\r\n\r\nUsage\r\n-----\r\n\r\nNode.js\r\n\r\n```js\r\nvar AsciiTable = require('ascii-table')\r\n```\r\n\r\nBrowser\r\n\r\n```html\r\n<script src=\"ascii-table.min.js\"></script>\r\n```\r\n\r\n*Note*: If using in the browser, it will be placed under `window.AsciiTable`\r\n\r\n\r\nExample\r\n-------\r\n\r\nBasic usage\r\n\r\n```js\r\nvar table = new AsciiTable('A Title')\r\ntable\r\n  .setHeading('', 'Name', 'Age')\r\n  .addRow(1, 'Bob', 52)\r\n  .addRow(2, 'John', 34)\r\n  .addRow(3, 'Jim', 83)\r\n\r\nconsole.log(table.toString())\r\n```\r\n\r\n```\r\n.----------------.\r\n|    A Title     |\r\n|----------------|\r\n|   | Name | Age |\r\n|---|------|-----|\r\n| 1 | Bob  |  52 |\r\n| 2 | John |  34 |\r\n| 3 | Jim  |  83 |\r\n'----------------'\r\n```\r\n\r\nWe can make a simple table without a title or headings as well.\r\n\r\n```js\r\nvar table = new AsciiTable()\r\n\r\ntable\r\n  .addRow('a', 'apple', 'Some longer string')\r\n  .addRow('b', 'banana', 'hi')\r\n  .addRow('c', 'carrot', 'meow')\r\n  .addRow('e', 'elephants')\r\n\r\n\r\nconsole.log(table.toString())\r\n```\r\n\r\n```\r\n.------------------------------------.\r\n| a | apple     | Some longer string |\r\n| b | banana    | hi                 |\r\n| c | carrot    | meow               |\r\n| e | elephants |                    |\r\n'------------------------------------'\r\n```\r\n\r\n\r\nAPI\r\n---\r\n\r\n### Static Methods\r\n\r\n#### AsciiTable\r\n\r\nSee: `AsciiTable.factory` for details on instantiation\r\n\r\n#### AsciiTable.factory([title])\r\n\r\nTable instance creator\r\n\r\n* `title` - table title (optional, default `null`)\r\n\r\n***Note:*** If an object is passed in place of the `title`, the `fromJSON` \r\nmethod will be used to populate the table.\r\n\r\nExample:\r\n\r\n```js\r\nvar table = AsciiTable.factory('title')\r\n\r\nvar table = AsciiTable.factory({\r\n  title: 'Title'\r\n, heading: [ 'id', 'name' ]\r\n, rows: [ \r\n    [ 1, 'Bob' ]\r\n  , [ 2, 'Steve' ] \r\n  ] \r\n})\r\n```\r\n\r\n\r\n#### AsciiTable.align(direction, val, len, [pad])\r\n\r\nShortcut to one of the three following methods\r\n\r\n* `direction` - alignment direction (`AsciiTable.LEFT`, `AsciiTable.CENTER`, `AsciiTable.RIGHT`)\r\n* `val` - string to align\r\n* `len` - total length of created string\r\n* `pad` - padding / fill char (optional, default `' '`)\r\n\r\nExample:\r\n\r\n```js\r\ntable.align(AsciiTable.LEFT, 'hey', 7) // 'hey    '\r\n```\r\n\r\n\r\n#### AsciiTable.alignLeft(val, len, [pad])\r\n\r\n* `val` - string to align\r\n* `len` - total length of created string\r\n* `pad` - padding / fill char (optional, default `' '`)\r\n\r\nExample:\r\n\r\n```js\r\ntable.alignLeft('hey', 7, '-') // 'hey----'\r\n```\r\n\r\n\r\n#### AsciiTable.alignCenter(val, len, [pad])\r\n\r\n* `val` - string to align\r\n* `len` - total length of created string\r\n* `pad` - padding / fill char (optional, default `' '`)\r\n\r\nExample:\r\n\r\n```js\r\ntable.alignCenter('hey', 7) // '  hey  '\r\n```\r\n\r\n\r\n#### AsciiTable.alignRight(val, len, [pad])\r\n\r\n* `val` - string to align\r\n* `len` - total length of created string\r\n* `pad` - padding / fill char (optional, default `' '`)\r\n\r\nExample:\r\n\r\n```js\r\ntable.alignRight('hey', 7) // '    hey'\r\n```\r\n\r\n\r\n#### AsciiTable.alignAuto(val, len, [pad])\r\n\r\nAttempt to do intelligent alignment of provided `val`, `String` input will \r\nbe left aligned, `Number` types will be right aligned.\r\n\r\n* `val` - string to align\r\n* `len` - total length of created string\r\n* `pad` - padding / fill char (optional, default `' '`)\r\n\r\nExample:\r\n\r\n```js\r\ntable.align(AsciiTable.LEFT, 'hey', 7) // 'hey    '\r\n```\r\n\r\n\r\n#### AsciiTable.arrayFill(len, [val])\r\n\r\nCreate a new array at the given len, filled with the given value, mainly used internally\r\n\r\n* `len` - length of array\r\n* `val` - fill value (optional)\r\n\r\nExample:\r\n\r\n```js\r\nAsciiTable.arrayFill(4, 0) // [0, 0, 0, 0]\r\n```\r\n\r\n### Instance Methods\r\n\r\n#### instance.setBorder([edge], [fill], [top], [bottom])\r\n\r\nSet the border characters for rendering, if no arguments are passed it will be \r\nreset to defaults. If a single `edge` arg is passed, it will be used for all borders.\r\n\r\n* `edge` - horizontal edges (optional, default `|`)\r\n* `fill` - vertical edges (optional, default `-`)\r\n* `top` - top corners (optional, default `.`)\r\n* `bottom` - bottom corners (optional, default `'`)\r\n\r\nExample:\r\n\r\n```js\r\nvar table = new AsciiTable('Stars')\r\ntable\r\n  .setBorder('*')\r\n  .setHeading('oh', 'look')\r\n  .addRow('so much', 'star power')\r\n\r\nconsole.log(table.toString())\r\n```\r\n\r\n```\r\n************************\r\n*        Stars         *\r\n************************\r\n*   oh    *    look    *\r\n************************\r\n* so much * star power *\r\n************************\r\n```\r\n\r\n\r\n#### instance.removeBorder()\r\n\r\nExample:\r\n\r\n```js\r\ntable.removeBorder()\r\n\r\nconsole.log('' + table)\r\n```\r\n\r\n```\r\n  #     Fruit           Thing\r\n --- ----------- --------------------\r\n  a       apple   Some longer string\r\n  b      banana           hi\r\n  c      carrot          meow\r\n  e   elephants\r\n```\r\n\r\n\r\n#### instance.setAlign(idx, direction)\r\n\r\n* `idx` - column index to align\r\n* `direction` - alignment direction, (`AsciiTable.LEFT`, `AsciiTable.CENTER`, `AsciiTable.RIGHT`)\r\n\r\nExample:\r\n\r\n```js\r\ntable\r\n  .setAlign(2, AsciiTable.RIGHT)\r\n  .setAlign(1, AsciiTable.CENTER)\r\n\r\nconsole.log(table.toString())\r\n```\r\n\r\n```\r\n.-------------------------------------.\r\n| a  |   apple   | Some longer string |\r\n| b  |   banana  |                 hi |\r\n| c  |   carrot  |               meow |\r\n| e  | elephants |                    |\r\n'-------------------------------------'\r\n```\r\n\r\n\r\n#### instance.setAlignLeft(idx)\r\n\r\nAlias to `instance.setAlign(idx, AsciiTable.LEFT)`\r\n\r\n\r\n#### instance.setAlignCenter(idx)\r\n\r\nAlias to `instance.setAlign(idx, AsciiTable.CENTER)`\r\n\r\n\r\n#### instance.setAlignRight(idx)\r\n\r\nAlias to `instance.setAlign(idx, AsciiTable.RIGHT)`\r\n\r\n\r\n#### instance.setTitle(title)\r\n\r\n* `title` - table title\r\n\r\nExample:\r\n\r\n```js\r\nvar table = new AsciiTable('Old Title')\r\n\r\ntable.setTitle('New Title')\r\n```\r\n\r\n#### instance.getTitle()\r\n\r\nGet the current title of the table\r\n\r\nExample:\r\n\r\n```js\r\ntable.getTitle() // 'New Title'\r\n```\r\n\r\n\r\n#### instance.setTitleAlign(direction)\r\n\r\n* `direction` - table alignment direction\r\n\r\nExample:\r\n\r\n```js\r\n```\r\n\r\n\r\n#### instance.setTitleAlignLeft()\r\n\r\nAlias to `instance.setTitleAlign(AsciiTable.LEFT)`\r\n\r\n\r\n#### instance.setTitleAlignCenter()\r\n\r\nAlias to `instance.setTitleAlign(AsciiTable.CENTER)`\r\n\r\n\r\n#### instance.setTitleAlignRight()\r\n\r\nAlias to `instance.setTitleAlign(AsciiTable.RIGHT)`\r\n\r\n\r\n#### instance.sort(iterator)\r\n\r\n* `iterator` - sorting method to run against the rows\r\n\r\nExample:\r\n\r\n```js\r\ntable.sort(function(a, b) {\r\n  return a[2] - b[2]\r\n})\r\nconsole.log(table.toString())\r\n```\r\n\r\n```\r\n.----------------.\r\n| 2 | John |  34 |\r\n| 1 | Bob  |  52 |\r\n| 3 | Jim  |  83 |\r\n'----------------'\r\n```\r\n\r\n\r\n#### instance.sortColumn(index, iterator)\r\n\r\nSorting shortcut for targeting a specific column\r\n\r\n* `index` - column idx to sort\r\n* `iterator` - sorting method to run against column values\r\n\r\nExample:\r\n\r\n```js\r\n// This is quivalent to the `sort` example above\r\ntable.sortColumn(2, function(a, b) {\r\n  return a - b\r\n})\r\n```\r\n\r\n\r\n#### instance.setHeading(heading, [...])\r\n\r\nSet the column headings for the table, takes arguments the same way as `addRow`\r\n\r\n* `heading` - heading array or arguments\r\n\r\nExample:\r\n\r\n```js\r\ntable.setHeading('ID', 'Key', 'Value')\r\n\r\n// or:\r\n\r\ntable.setHeading(['ID', 'Key', 'Value'])\r\n```\r\n\r\n\r\n#### instance.setHeadingAlign(direction)\r\n\r\n* `direction` - \r\n\r\nExample:\r\n\r\n```js\r\n```\r\n\r\n\r\n#### instance.setHeadingAlignLeft()\r\n\r\nAlias to `instance.setHeadingAlignLeft(AsciiTable.LEFT)`\r\n\r\n\r\n#### instance.setHeadingAlignCenter()\r\n\r\nAlias to `instance.setHeadingAlignLeft(AsciiTable.CENTER)`\r\n\r\n\r\n#### instance.setHeadingAlignRight()\r\n\r\nAlias to `instance.setHeadingAlignLeft(AsciiTable.RIGHT)`\r\n\r\n\r\n#### instance.addRow(row, [...])\r\n\r\nRows can be added using a single array argument, or the arguments if multiple \r\nargs are used when calling the method.\r\n\r\n* `row` - array or arguments of column values\r\n\r\nExample:\r\n\r\n```js\r\nvar table = new AsciiTable()\r\n\r\ntable\r\n  .addRow(1, 'Bob', 52)\r\n  .addRow([2, 'John', 34])\r\n\r\nconsole.log(table.render())\r\n```\r\n\r\n```\r\n.---------------.\r\n| 1 | Bob  | 52 |\r\n| 2 | John | 34 |\r\n'---------------'\r\n```\r\n\r\n\r\n#### instance.addRowMatrix(rows)\r\n\r\nBulk `addRow` operation\r\n\r\n* `rows` - multidimentional array of rows\r\n\r\nExample:\r\n\r\n```js\r\ntable.addRowMatrix([\r\n  [2, 'John', 34]\r\n, [3, 'Jim', 83]\r\n])\r\n\r\n```\r\n\r\n\r\n#### instance.setJustify(enabled)\r\n\r\nJustify all columns to be the same width\r\n\r\n* `enabled` - boolean for turning justify on or off, `undefined` considered true\r\n\r\nExample:\r\n\r\n```js\r\ntable\r\n  .addRow('1', 'two', 'three')\r\n  .setJustify()\r\n\r\nconsole.log(table.toString())\r\n```\r\n\r\n```\r\n.-----------------------.\r\n| 1     | two   | three |\r\n'-----------------------'\r\n```\r\n\r\n\r\n#### instance.toString()\r\n\r\nRender the instance as a string for output\r\n\r\n**Alias**: [`valueOf`, `render`]\r\n\r\n\r\n#### instance.toJSON()\r\n\r\nReturn the JSON representation of the table, this also allows us to call \r\n`JSON.stringify` on the instance.\r\n\r\nExample:\r\n\r\n```js\r\nvar table = new AsciiTable('Title')\r\n\r\ntable\r\n  .setHeading('id', 'name')\r\n  .addRow(1, 'Bob')\r\n  .addRow(2, 'Steve')\r\n\r\nconsole.log(table.toJSON())\r\nconsole.log(JSON.stringify(table))\r\n```\r\n\r\n```js\r\n{\r\n  title: 'Title'\r\n, heading: [ 'id', 'name' ]\r\n, rows: [ \r\n    [ 1, 'Bob' ]\r\n  , [ 2, 'Steve' ] \r\n  ] \r\n}\r\n```\r\n\r\n```\r\n{\"title\":\"Title\",\"heading\":[\"id\",\"name\"],\"rows\":[[1,\"Bob\"],[2,\"Steve\"]]}\r\n```\r\n\r\n\r\n#### instance.fromJSON(json)\r\n\r\nPopulate the table from json, should match the `toJSON` output above.\r\n\r\n**Alias**: [`parse`]\r\n\r\nExample:\r\n\r\n```js\r\nvar table = new AsciiTable().fromJSON({\r\n  title: 'Title'\r\n, heading: [ 'id', 'name' ]\r\n, rows: [ \r\n    [ 1, 'Bob' ]\r\n  , [ 2, 'Steve' ] \r\n  ] \r\n})\r\n```\r\n\r\n\r\n#### instance.clear()\r\n\r\nClear / reset all table data\r\n\r\n**Alias**: [`reset`]\r\n\r\n\r\n#### instance.clearRows()\r\n\r\nReset all row data, maintains title and headings.\r\n\r\n\r\n\r\nInstall\r\n-------\r\n\r\nWith [npm](https://npmjs.org)\r\n\r\n```\r\nnpm install ascii-table\r\n```\r\n\r\n\r\nLicense\r\n-------\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2013 Beau Sorensen\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}